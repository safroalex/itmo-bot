import time
import re
import os
import logging
from typing import List, Tuple

import openai
import requests
import urllib.parse
from fastapi import FastAPI, HTTPException, Request
from pydantic import HttpUrl
from dotenv import load_dotenv

from schemas.request import PredictionRequest, PredictionResponse

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
load_dotenv()

# –ö–ª—é—á –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞)
OPENAI_API_KEY_MAIN = os.getenv("OPENAI_API_KEY", "")

# –ö–ª—é—á –¥–ª—è "–∞–≥–µ–Ω—Ç–∞-—É–ø—Ä–æ—â–∞—Ç–µ–ª—è"
# –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä OPENAI_API_KEY_SECONDARY),
# –ª–∏–±–æ –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–æ–ø–∏—Å–∞—Ç—å, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏.
OPENAI_API_KEY_SECONDARY = os.getenv("OPENAI_API_KEY_SECONDARY", "")

# –ö–ª—é—á–∏ Google Custom Search
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID", "")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log", encoding="utf-8"),
        logging.StreamHandler()  # –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger("itmo-bot")


@app.on_event("startup")
def startup_event():
    logger.info("Application started")


@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    body = await request.body()

    try:
        body_text = body.decode("utf-8")
    except UnicodeDecodeError:
        body_text = "<Could not decode request body>"

    logger.info(
        f"Incoming request: {request.method} {request.url}\n"
        f"Request body: {body_text}"
    )

    response = await call_next(request)
    duration = time.time() - start_time

    logger.info(
        f"Request completed: {request.method} {request.url}\n"
        f"Status: {response.status_code}\n"
        f"Duration: {duration:.3f}s"
    )
    return response


@app.post("/api/request", response_model=PredictionResponse)
async def predict(body: PredictionRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, —É–ø—Ä–æ—â–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ "–∞–≥–µ–Ω—Ç–∞-—É–ø—Ä–æ—â–∞—Ç–µ–ª—è",
    –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ Google Search, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å OpenAI –¥–ª—è –≤—ã–¥–∞—á–∏ –æ—Ç–≤–µ—Ç–∞.
    """
    try:
        logger.info(f"Processing prediction request with id: {body.id}")

        # 1) –£–ø—Ä–æ—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Google:
        simplified_query = simplify_query_with_openai(body.query)

        logger.info(f"GOOGLE_API_KEY: {GOOGLE_API_KEY}, GOOGLE_CSE_ID: {GOOGLE_CSE_ID}")

        # 2) –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ Google –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        found_links = do_web_search(simplified_query, max_links=3)

        if not found_links:
            logger.warning(
                f"No search results found for simplified query: {simplified_query}. Trying again with max_links=5..."
            )
            found_links = do_web_search(simplified_query, max_links=5)

        # 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å (—Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–ª–∏ –≤–∞—à —Ç–µ–∫—É—â–∏–π OPENAI_API_KEY)
        answer_text, chosen_answer = generate_answer_with_openai(body.query, found_links)

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, —Å—Ç–∞–≤–∏–º -1
        if chosen_answer is None:
            chosen_answer = -1

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        valid_sources = []
        for link in found_links:
            try:
                valid_sources.append(HttpUrl(link))
            except Exception as e:
                logger.debug(f"Skipping invalid link: {link} | error: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = PredictionResponse(
            id=body.id,
            answer=chosen_answer,
            reasoning=answer_text,
            sources=valid_sources
        )

        logger.info(f"Successfully processed request {body.id}")
        logger.info(f"Response data: {response_data.json()}")

        return response_data

    except ValueError as e:
        logger.error(f"Validation error for request {body.id}: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Internal error processing request {body.id}: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")


def simplify_query_with_openai(original_query: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è-¬´–∞–≥–µ–Ω—Ç¬ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Ç–∞–∫, —á—Ç–æ–±—ã Google –º–æ–≥ –µ–≥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
    """
    logger.info(f"Using secondary OpenAI key to simplify query: {original_query}")

    client = openai.OpenAI(api_key=OPENAI_API_KEY_SECONDARY)

    system_prompt = (
        "You are a query simplifier. "
        "Your goal is to take a complex or verbose question and produce a concise, clear search query "
        "that can be used with a standard search engine (like Google) to find relevant results.\n\n"
        "Instructions:\n"
        "- Output only the simplified search query, in a few words.\n"
        "- Do not include extraneous text or explanations.\n"
        "- Keep it short, but keep important keywords.\n"
        "If the user question includes multiple lines or answer choices, just extract the core idea."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {
                    "role": "user",
                    "content": f"Original user query:\n{original_query}\n\nReturn a short query suitable for Google."
                }
            ],
            max_tokens=50,
            temperature=0.3
        )

        simplified_query = response.choices[0].message.content.strip()
        logger.info(f"Simplified query: {simplified_query}")
        return simplified_query

    except Exception as e:
        logger.error(f"Error simplifying query with secondary key: {str(e)}")
        return original_query


def do_web_search(query: str, max_links: int = 3) -> List[str]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Google Custom Search API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ (–Ω–µ –±–æ–ª–µ–µ max_links).
    """
    logger.info(f"üîç Searching Google for: {query}")

    if not GOOGLE_API_KEY or not GOOGLE_CSE_ID:
        logger.error(f"‚ùå Missing Google API credentials! GOOGLE_API_KEY: {GOOGLE_API_KEY}, GOOGLE_CSE_ID: {GOOGLE_CSE_ID}")
        return []

    params = {
        "key": GOOGLE_API_KEY,  # ‚úÖ API-–∫–ª—é—á
        "cx": GOOGLE_CSE_ID,  # ‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        "q": urllib.parse.quote(query),  # ‚úÖ –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    }

    url = "https://www.googleapis.com/customsearch/v1"  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º

    logger.info(f"üîç Google API Request: {url}?{params}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å

    try:
        resp = requests.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()
        logger.info(f"‚úÖ Google API Response: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

        links = [item["link"] for item in data.get("items", []) if "link" in item][:max_links]
        logger.info(f"‚úÖ Found links: {links}")

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Google API Error: {str(e)} | Response: {resp.text if 'resp' in locals() else 'No response'}")
        return []

    return links



def generate_answer_with_openai(original_query: str, sources: List[str]) -> Tuple[str, int]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á OpenAI, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —É—á–∏—Ç—ã–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
    """
    client = openai.OpenAI(api_key=OPENAI_API_KEY_MAIN)

    system_prompt = (
        "You are an assistant that answers questions strictly based on the provided sources. "
        "Do not generate links yourself. If there are no sources, respond with 'No relevant information found'."
    )


    sources_context = "\n".join([f"- {link}" for link in sources])

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {
                    "role": "user",
                    "content": (
                        f"Question:\n{original_query}\n\n"
                        f"Sources:\n{sources_context}\n\n"
                        "Answer with the choice number if applicable, reasoning, and sources."
                    )
                }
            ],
            max_tokens=400,
            temperature=0.2
        )

        content = response.choices[0].message.content.strip()
        logger.info(f"OpenAI main model response:\n{content}")

    except Exception as e:
        logger.error(f"OpenAI error (main key): {str(e)}")
        return f"Error: {str(e)}", -1

    chosen_answer = None
    match = re.search(r"\b([1-9]|10)\b", content)
    if match:
        chosen_answer = int(match.group(1))

    return content, chosen_answer if chosen_answer is not None else -1
